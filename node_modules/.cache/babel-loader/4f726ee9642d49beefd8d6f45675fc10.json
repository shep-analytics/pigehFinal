{"ast":null,"code":"var _jsxFileName = \"/Users/teancum/pigehFinal/src/App.js\";\nimport React from 'react'; //import Web3 from 'web3';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport eventBus from './Components/EventBus'; //import contractInfo from './contractInfo'\n\nimport Mint from './Components/Mint.js';\nimport NFT from './Components/NFT';\nimport Intro from './Components/Intro';\nimport Interesting from './Components/Interesting';\nimport Temple from './Components/Temple';\nimport Roadmap from './Components/Roadmap';\nimport Faq from './Components/Faq';\nimport '@fortawesome/fontawesome-free/js/fontawesome';\nimport '@fortawesome/fontawesome-free/js/solid';\nimport '@fortawesome/fontawesome-free/js/regular';\nimport '@fortawesome/fontawesome-free/js/brands';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.css';\nlet web3, contract, contractAddress;\n\nclass Container extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      address: '',\n      connected: false\n    };\n    this.mintNFT = this.mintNFT.bind(this);\n    this.connectWallet = this.connectWallet.bind(this);\n    this.displayNotification = this.displayNotification.bind(this);\n    this.scanConnectedWallet = this.scanConnectedWallet.bind(this);\n  }\n\n  connectWallet() {\n    if (window.ethereum) {\n      (async () => {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        let accounts = await web3.eth.getAccounts();\n        this.setState({\n          address: accounts[0],\n          connected: true\n        });\n        eventBus.dispatch('connectedWallet', {\n          address: accounts[0]\n        });\n      })();\n    } else {\n      alert('Install Metamask please.');\n    }\n  }\n\n  scanConnectedWallet() {\n    if (this.state.connected === true) return;\n    web3.eth.getAccounts(async (err, accounts) => {\n      if (err != null) {\n        console.error(\"An error occurred: \" + err);\n      } else if (accounts.length !== 0) {\n        this.setState({\n          connected: true,\n          address: accounts[0]\n        });\n        eventBus.dispatch('connectedWallet', {\n          address: accounts[0]\n        });\n      }\n    });\n  }\n\n  async mintNFT(mintCount) {\n    let address = this.state.address;\n    let saleActive = await contract.methods.Sale().call();\n    let presaleActive = await contract.methods.preSale().call();\n\n    if (this.state.connected === false) {\n      this.displayNotification('info', 'Please connect wallet.');\n      return;\n    }\n\n    if (presaleActive === true) {\n      let price = await contract.methods._presale_price().call();\n      await contract.methods.presaleMintItems(mintCount).send({\n        from: address,\n        to: contractAddress,\n        value: parseInt(price) * mintCount\n      }).then(() => {\n        this.displayNotification('success', 'You have minted successfully.');\n      }).catch(err => {\n        console.log(err);\n        this.displayNotification('warning', 'Transaction error. Please check all again.');\n      });\n    } else if (saleActive === true) {\n      let price = await contract.methods._price().call();\n      await contract.methods.mintItems(mintCount).send({\n        from: address,\n        to: contractAddress,\n        value: parseInt(price) * mintCount\n      }).then(() => {\n        this.displayNotification('success', 'You have minted successfully.');\n      }).catch(err => {\n        console.log(err);\n        this.displayNotification('warning', 'Transaction error. Please check all again.');\n      });\n    }\n  }\n\n  displayNotification(appearance, text) {\n    switch (appearance) {\n      case 'warning':\n        toast.warn(text);\n        break;\n\n      case 'info':\n        toast.info(text);\n        break;\n\n      case 'error':\n        toast.error(text);\n        break;\n\n      case 'success':\n        toast.success(text);\n        break;\n\n      default:\n        break;\n    }\n  } // componentDidMount() {\n  //   if(window.ethereum) {\n  //     web3 = new Web3(window.ethereum);\n  //     contractAddress = contractInfo.address;\n  //     contract = new web3.eth.Contract(contractInfo.abi, contractInfo.address);\n  //     this.scanConnectedWallet()\n  //   }\n  //   eventBus.on('mint', (_event) => {\n  //     this.mintNFT(_event.mintCount)\n  //   })\n  //   eventBus.on('connectWallet', (_event) => {\n  //     this.connectWallet()\n  //   })\n  //   return () => {\n  //     eventBus.remove('mint', (_event) => {\n  //       this.mintNFT(_event.mintCount)\n  //     })\n  //     eventBus.remove('connectWallet', (_event) => {\n  //       this.connectWallet()\n  //     })\n  //   }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative w-full h-full bg-color-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ToastContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Mint, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(NFT, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Intro, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Interesting, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Temple, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Roadmap, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Faq, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/teancum/pigehFinal/src/App.js"],"names":["React","ToastContainer","toast","eventBus","Mint","NFT","Intro","Interesting","Temple","Roadmap","Faq","web3","contract","contractAddress","Container","Component","constructor","state","address","connected","mintNFT","bind","connectWallet","displayNotification","scanConnectedWallet","window","ethereum","request","method","accounts","eth","getAccounts","setState","dispatch","alert","err","console","error","length","mintCount","saleActive","methods","Sale","call","presaleActive","preSale","price","_presale_price","presaleMintItems","send","from","to","value","parseInt","then","catch","log","_price","mintItems","appearance","text","warn","info","success","render","App"],"mappings":"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","sourcesContent":["import React from 'react';\n//import Web3 from 'web3';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport eventBus from './Components/EventBus';\n//import contractInfo from './contractInfo'\nimport Mint from './Components/Mint.js';\nimport NFT from './Components/NFT';\nimport Intro from './Components/Intro';\nimport Interesting from './Components/Interesting';\nimport Temple from './Components/Temple';\nimport Roadmap from './Components/Roadmap';\nimport Faq from './Components/Faq';\n\nimport '@fortawesome/fontawesome-free/js/fontawesome'\nimport '@fortawesome/fontawesome-free/js/solid'\nimport '@fortawesome/fontawesome-free/js/regular'\nimport '@fortawesome/fontawesome-free/js/brands'\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport './App.css';\n\nlet web3, contract, contractAddress;\nclass Container extends React.Component {\n\n  constructor() {\n    super()\n\n    this.state = {\n      address: '',\n      connected: false\n    }\n\n    this.mintNFT = this.mintNFT.bind(this)\n    this.connectWallet = this.connectWallet.bind(this)\n    this.displayNotification = this.displayNotification.bind(this)\n    this.scanConnectedWallet = this.scanConnectedWallet.bind(this)\n  }\n\n  connectWallet() {\n    if (window.ethereum) {\n      (async () => {\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n        let accounts = await web3.eth.getAccounts();\n        \n        this.setState({\n          address: accounts[0],\n          connected: true\n        })\n\n        eventBus.dispatch('connectedWallet', {\n          address: accounts[0]\n        })\n      })()\n    } else {\n      alert('Install Metamask please.');\n    }\n  }\n\n  scanConnectedWallet() {\n    if(this.state.connected === true) return;\n\n    web3.eth.getAccounts(async (err, accounts) => {\n        if (err != null) {\n            console.error(\"An error occurred: \" + err)\n        } else if (accounts.length !== 0 ) {\n            this.setState({\n              connected: true,\n              address: accounts[0]\n            })\n            eventBus.dispatch('connectedWallet', {\n              address: accounts[0]\n            })\n        }\n    })\n  }\n\n  async mintNFT(mintCount) {\n    let address = this.state.address\n    let saleActive = await contract.methods.Sale().call()\n    let presaleActive = await contract.methods.preSale().call()\n\n    if(this.state.connected === false) {\n      this.displayNotification('info', 'Please connect wallet.')\n      return\n    }\n\n    if(presaleActive === true) {\n      let price = await contract.methods._presale_price().call()\n\n      await contract.methods.presaleMintItems(mintCount).send({\n        from: address,\n        to: contractAddress,\n        value: parseInt(price) * mintCount\n      })\n      .then(() => {\n        this.displayNotification('success', 'You have minted successfully.')\n      })\n      .catch((err) => {\n        console.log(err)\n        this.displayNotification('warning', 'Transaction error. Please check all again.')\n      })\n    }\n    else if(saleActive === true) {\n      let price = await contract.methods._price().call()\n\n      await contract.methods.mintItems(mintCount).send({\n        from: address,\n        to: contractAddress,\n        value: parseInt(price) * mintCount\n      })\n      .then(() => {\n        this.displayNotification('success', 'You have minted successfully.')\n      })\n      .catch((err) => {\n        console.log(err)\n        this.displayNotification('warning', 'Transaction error. Please check all again.')\n      })\n    }\n  }\n\n  displayNotification(appearance, text) {\n\n    switch(appearance) {\n        case 'warning':\n            toast.warn(text)\n            break\n        case 'info':\n            toast.info(text)\n            break\n        case 'error':\n            toast.error(text)\n            break\n        case 'success':\n            toast.success(text)\n            break\n        default:\n            break\n    }\n  }\n\n  // componentDidMount() {\n  //   if(window.ethereum) {\n  //     web3 = new Web3(window.ethereum);\n  //     contractAddress = contractInfo.address;\n  //     contract = new web3.eth.Contract(contractInfo.abi, contractInfo.address);\n  //     this.scanConnectedWallet()\n  //   }\n\n  //   eventBus.on('mint', (_event) => {\n  //     this.mintNFT(_event.mintCount)\n  //   })\n  //   eventBus.on('connectWallet', (_event) => {\n  //     this.connectWallet()\n  //   })\n\n  //   return () => {\n  //     eventBus.remove('mint', (_event) => {\n  //       this.mintNFT(_event.mintCount)\n  //     })\n  //     eventBus.remove('connectWallet', (_event) => {\n  //       this.connectWallet()\n  //     })\n  //   }\n  // }\n\n  render() {\n    return (\n      <div className=\"relative w-full h-full bg-color-primary\">\n        <ToastContainer />\n        <Mint />\n        <NFT />\n        <Intro />\n        <Interesting />\n        <Temple />\n        <Roadmap />\n        <Faq />\n      </div>\n    )\n  }\n}\n\nfunction App() {\n\n  return (\n    <Container>\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}